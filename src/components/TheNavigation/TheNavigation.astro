---
// Styles
import "./TheNavigation.scss";

// Libraries and Packages
import {Icon} from "astro-icon/components";

// Composables
import {
    getLocaleFromUrl,
    useTranslations,
    useTranslatedPath,
} from "@i18n/utils";
import TheLanguagePicker from "../TheLanguagePicker/TheLanguagePicker.astro";

// JavaScript
const locale = getLocaleFromUrl(Astro.url);
const t = useTranslations(locale);
const translatePath = useTranslatedPath(locale);
---

<nav class="nav">
    <div class="nav__menu">
        <button
            id="close-nav"
            class="[ close-nav ] [ button-reset fs-700 ]"
            aria-label={t("nav.close")}
        >
            <Icon name="close" class="interactive-icon svg-icon" size={30} />
        </button>

        <ul role="list">
            <li><a href={translatePath("/")}>{t("nav.home")}</a></li>
            <li><a href={translatePath("/a-propos")}>{t("nav.about")}</a></li>
            <li><a href={translatePath("/therapie")}>{t("nav.therapy")}</a></li>
            <!--<li>-->
            <!--    <a href={translatePath("/ressources")}>{t("nav.resources")}</a>-->
            <!--</li>-->
            <li>
                <a href={translatePath("/rdv")} class="button"
                    >{t("nav.appointment")}</a
                >
            </li>

            <TheLanguagePicker separator="top" />
        </ul>
    </div>

    <button
        id="open-nav"
        class="[ open-nav ] [ p-0 fs-700 ]"
        data-btn-variant="secondary"
        aria-label={t("nav.open")}
    >
        <Icon name="burger-menu" class="svg-icon interactive-icon" />
    </button>
</nav>

<script>
    import {createFocusTrap} from "focus-trap";

    (() => {
        const navMenu = document.querySelector(".nav__menu");
        const navMenuItems = navMenu?.querySelectorAll("ul > *");
        const openMenuBtn = document.getElementById("open-nav");
        const closeMenuBtn = document.getElementById("close-nav");

        if (!openMenuBtn || !closeMenuBtn || !navMenu || !navMenuItems)
            throw new Error("Something wrong happened fetching HTML elements!");

        if (!(navMenu instanceof HTMLElement))
            throw new Error("navMenu is not a HTMLElement!");

        const focusTrap = createFocusTrap(navMenu, {
            initialFocus: false,
        });

        Array.from(navMenuItems).forEach(el =>
            el.addEventListener("click", () => {
                navMenu?.removeAttribute("data-state-expanded");
                focusTrap.deactivate();
            }),
        );

        openMenuBtn?.addEventListener("click", () => {
            navMenu?.setAttribute("data-state-expanded", "");
            focusTrap.activate();
        });

        closeMenuBtn?.addEventListener("click", () => {
            navMenu?.removeAttribute("data-state-expanded");
            focusTrap.deactivate();
        });
    })();
</script>
