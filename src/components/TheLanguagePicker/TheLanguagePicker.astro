---
// Styles
import "./TheLanguagePicker.scss";

// Locales
import {locales} from "@i18n/config";

// Composables
import {
    getLocaleFromUrl,
    useTranslatedPath,
    getRouteFromUrl,
} from "@i18n/utils";
import {useTranslations} from "../../i18n/utils";

// JavaScript
const locale = getLocaleFromUrl(Astro.url);
const t = useTranslations(locale);
const translatePath = useTranslatedPath(locale);
const route = getRouteFromUrl(Astro.url);

interface Props {
    separator?: "left" | "top";
}

const {separator} = Astro.props;

const leftSeparator =
    separator === "left"
        ? `
    padding-left: var(--space-md);
    border-left: 1px solid var(--clr-light-neutral);
`
        : "";

const topSeparator =
    separator === "top"
        ? `
    width: 150px; 
    padding-top: var(--space-md);
    border-top: 1px solid var(--clr-light-neutral);
`
        : "";

const separatorStyles = [leftSeparator, topSeparator].join("");
---

<!--{separator === 'top' && <hr style="width: 150px; border: 1px solid var(&#45;&#45;clr-light-neutral)">}-->
<ul
    class="[ language-picker ] [ uppercase ]"
    style={separatorStyles}
>
    {
        locales.map(locale => (
            <li>
                <a
                    lang={locale}
                    hreflang={locale}
                    class="clr-medium-neutral"
                    href={translatePath(`/${route ? route : ""}`, locale)}
                    aria-label={t(`language.switch.${locale}`)}
                >
                    {locale}
                </a>
            </li>
        ))
    }
</ul>

<script is:inline define:vars={{locale}}>
    const allLocalesNodes = Array.from(
        document.querySelectorAll("a"),
    );
    for (const el of allLocalesNodes) {
        el.textContent.trim() === locale
            ? el.setAttribute("active", "")
            : el.removeAttribute("active");
    }
</script>
